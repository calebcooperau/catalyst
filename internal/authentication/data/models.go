// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package data

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Filetype string

const (
	FiletypeDrawio Filetype = "drawio"
	FiletypeXml    Filetype = "xml"
)

func (e *Filetype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Filetype(s)
	case string:
		*e = Filetype(s)
	default:
		return fmt.Errorf("unsupported scan type for Filetype: %T", src)
	}
	return nil
}

type NullFiletype struct {
	Filetype Filetype
	Valid    bool // Valid is true if Filetype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFiletype) Scan(value interface{}) error {
	if value == nil {
		ns.Filetype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Filetype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFiletype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Filetype), nil
}

func (e Filetype) Valid() bool {
	switch e {
	case FiletypeDrawio,
		FiletypeXml:
		return true
	}
	return false
}

func AllFiletypeValues() []Filetype {
	return []Filetype{
		FiletypeDrawio,
		FiletypeXml,
	}
}

type AuthUser struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type AuthUserProvider struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Provider       string
	ProviderUserID string
	CreatedAt      pgtype.Timestamptz
}

type Diagram struct {
	ID         uuid.UUID
	ProjectID  pgtype.UUID
	FileName   string
	FileUrl    string
	FileType   Filetype
	UploadedAt pgtype.Timestamptz
}

type Project struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Description string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type User struct {
	ID           uuid.UUID
	Email        string
	FirstName    string
	LastName     string
	MobileNumber *string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}
