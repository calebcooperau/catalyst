// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_write.sql

package data

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (email, first_name, last_name, mobile_number)	
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at
`

type AddUserParams struct {
	Email        string
	FirstName    string
	LastName     string
	MobileNumber *string
}

type AddUserRow struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.MobileNumber,
	)
	var i AddUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE from users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteUser, id)
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, first_name, last_name, mobile_number, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.MobileNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users 
SET email = $1, first_name = $2, last_name = $3, mobile_number = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $5
RETURNING updated_at
`

type UpdateUserParams struct {
	Email        string
	FirstName    string
	LastName     string
	MobileNumber *string
	ID           uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.MobileNumber,
		arg.ID,
	)
}
